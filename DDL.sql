CREATE TABLE HOSTELS (
	HOSTEL_ID NUMBER(10) PRIMARY KEY,
	HOSTEL_LOCATION VARCHAR2(40) NOT NULL,
	CAPACITY NUMBER(10) NOT NULL,
	HOSTEL_NAME VARCHAR2(255) NOT NULL
);

CREATE TABLE ROOMS (
	ROOM_ID NUMBER(10) GENERATED AS IDENTITY PRIMARY KEY,
	ROOM_NO VARCHAR2(20) NOT NULL,
	HOSTEL_ID NUMBER(10) NOT NULL,
	ROOM_TYPE VARCHAR2(20) NOT NULL CHECK (ROOM_TYPE IN('SINGLE', 'DORM')),
	ROOM_STATUS VARCHAR2(20) NOT NULL CHECK (ROOM_STATUS IN('OCCUPIED', 'UNOCCUPIED')),
    FOREIGN KEY (HOSTEL_ID) REFERENCES HOSTELS(HOSTEL_ID)
);

CREATE TABLE RESIDENTS (
	ERP_ID NUMBER(10) PRIMARY KEY,
	HOSTEL_ID NUMBER(10) NOT NULL,
	ROOM_ID NUMBER(10) NOT NULL,
	R_FIRST_NAME VARCHAR2(25) NOT NULL,
	R_LAST_NAME VARCHAR2(25) NOT NULL,
	PROGRAM VARCHAR2(25) NOT NULL,
	BATCH NUMBER(4) NOT NULL,
	CONTACT_INFO_EMAIL VARCHAR2(255) NOT NULL,
	CONTACT_INFO_NUMBER NUMBER(20) NOT NULL,
	EMERGENCY_CONTACT_NAME VARCHAR2(25) NOT NULL,
	EMERGENCY_CONTACT_RELATION VARCHAR2(25) NOT NULL,
	EMERGENCY_CONTACT_NUMBER NUMBER(10) NOT NULL,
    FOREIGN KEY (HOSTEL_ID) REFERENCES HOSTELS(HOSTEL_ID),
    FOREIGN KEY (ROOM_ID) REFERENCES ROOMS(ROOM_ID)
);

CREATE TABLE EMPLOYEES (
	EMPLOYEE_ID NUMBER(10) PRIMARY KEY,
	E_FIRST_NAME VARCHAR2(25) NOT NULL,
	E_LAST_NAME VARCHAR2(25) NOT NULL,
	DESIGNATION VARCHAR2(25) NOT NULL,
	E_EMAIL VARCHAR2(20) NOT NULL,
	E_CONTACT_NO NUMBER(20) NOT NULL
);


CREATE TABLE MAINTENANCE_REQUESTS (
	REQUEST_ID NUMBER(10) GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
	HOSTEL_ID NUMBER(10) NOT NULL,
	REQUEST_DATE DATE NOT NULL,
	REQ_DESCRIPTION VARCHAR2(255) NOT NULL,
	ERP_ID NUMBER(10) NOT NULL,
	REQUEST_STATUS VARCHAR2(25) NOT NULL CHECK (REQUEST_STATUS IN('Pending', 'In-Process', 'Completed')), 
    FOREIGN KEY (HOSTEL_ID) REFERENCES HOSTELS(HOSTEL_ID),
    FOREIGN KEY (ERP_ID) REFERENCES RESIDENTS(ERP_ID)
);


CREATE TABLE MAINTENANCE_REQUESTS_LOG (
    LOG_ID NUMBER(10) PRIMARY KEY,
    REQUEST_ID NUMBER(10) NOT NULL,
    LOG_DATE DATE DEFAULT SYSDATE,
    LOG_DESCRIPTION VARCHAR2(500),
    FOREIGN KEY (REQUEST_ID) REFERENCES MAINTENANCE_REQUESTS(REQUEST_ID)
);

-- Creating Sequence for LOG_ID
CREATE SEQUENCE maintenance_log_seq
    START WITH 6001
    INCREMENT BY 1
    NOCACHE
    NOCYCLE;
/

-- Creating Trigger to Auto-Generate LOG_ID
CREATE OR REPLACE TRIGGER maintenance_log_trigger
    BEFORE INSERT ON MAINTENANCE_REQUESTS_LOG
    FOR EACH ROW
BEGIN
    IF :NEW.LOG_ID IS NULL THEN
        SELECT maintenance_log_seq.NEXTVAL INTO :NEW.LOG_ID FROM dual;
    END IF;
END;
/

 -- Whenever a maintenance request is marked as 'Completed', the trigger inserts
 -- a corresponding record into the MAINTENANCE_REQUESTS_LOG table.

CREATE OR REPLACE TRIGGER trg_log_completed_request
    AFTER UPDATE OF REQUEST_STATUS ON MAINTENANCE_REQUESTS
    FOR EACH ROW
    WHEN (NEW.REQUEST_STATUS = 'Completed' AND OLD.REQUEST_STATUS <> 'Completed')
BEGIN
    INSERT INTO MAINTENANCE_REQUESTS_LOG (
        REQUEST_ID, 
        LOG_DATE, 
        LOG_DESCRIPTION
    ) VALUES (
        :NEW.REQUEST_ID, 
        SYSDATE, 
        'Maintenance request marked as Completed.'
    );
END;
/

-- Common Areas Table

CREATE TABLE COMMON_AREAS (
	COMMON_AREA_ID NUMBER(10) PRIMARY KEY,
	HOSTEL_ID NUMBER(10) NOT NULL,
	AREA_TYPE VARCHAR2(20) CHECK (AREA_TYPE IN ('COMMON ROOM', 'TV ROOM', 'GYM', 'MESS', 'GAME ROOM', 'PRAYER ROOM', 'WASHROOM', 'TUCK SHOP')) NOT NULL,
	AVAILABILITY VARCHAR2(20) NOT NULL CHECK (AVAILABILITY IN ('Available', 'Under Maintenance')),
    FOREIGN KEY (HOSTEL_ID) REFERENCES HOSTELS(HOSTEL_ID)
);



CREATE TABLE INVENTORY (
	INVENTORY_ID NUMBER(10) PRIMARY KEY,
	HOSTEL_ID NUMBER(10) NOT NULL,
	INV_TYPE VARCHAR2(25) NOT NULL,
	CONDITION VARCHAR2(40) CHECK (CONDITION IN ('Good', 'Needs repairing/replacement')) NOT NULL,
    FOREIGN KEY (HOSTEL_ID) REFERENCES HOSTELS(HOSTEL_ID)
);

 -- Creating a sequence and trigger for custom primary key for inventory table

CREATE SEQUENCE inv_seq
START WITH 1001 -- Start from 1001
INCREMENT BY 1; -- Increment by 1 for each new inventory

CREATE OR REPLACE TRIGGER inventory_trigger
BEFORE INSERT ON INVENTORY
FOR EACH ROW
BEGIN
  :NEW.INVENTORY_ID := inv_seq.NEXTVAL; 
END;

CREATE TABLE EMPLOYEE_ASSIGNMENTS (
	EMPLOYEE_ID NUMBER(10) NOT NULL,
	HOSTEL_ID NUMBER(10) NOT NULL,
	ASSIGNED_ROLE VARCHAR2(255) NOT NULL,
	START_DATE DATE NOT NULL,
	END_DATE DATE,
	PRIMARY KEY (EMPLOYEE_ID, HOSTEL_ID),
    FOREIGN KEY (EMPLOYEE_ID) REFERENCES EMPLOYEES(EMPLOYEE_ID),
    FOREIGN KEY (HOSTEL_ID) REFERENCES HOSTELS(HOSTEL_ID)
);

CREATE TABLE PAYMENTS (
	PAYMENT_ID NUMBER PRIMARY KEY,
    ERP_ID NUMBER(10) NOT NULL,
    PAYMENT_TYPE VARCHAR2(10) CHECK (PAYMENT_TYPE IN ('Mess', 'Laundry')), /*The payments made are only applicable for Mess and Laundry services */
    AMOUNT NUMBER,
    FOREIGN KEY (ERP_ID) REFERENCES RESIDENTS(ERP_ID)
);

/* Creating a sequence and trigger for custom primary key for payments table */

CREATE SEQUENCE payment_seq
START WITH 10001 -- Start from 10001 or any other starting value
INCREMENT BY 1; -- Increment by 1 for each new payment

CREATE OR REPLACE TRIGGER payment_trigger
BEFORE INSERT ON PAYMENTS
FOR EACH ROW
BEGIN
  :NEW.PAYMENT_ID := payment_seq.NEXTVAL; -- Automatically assign next sequence value
END;

CREATE TABLE MESS (
	MESS_ID NUMBER(10) PRIMARY KEY,
	ERP_ID NUMBER(10) NOT NULL,
	HOSTEL_ID NUMBER(10) NOT NULL,
	MESS_PERIOD VARCHAR2(25) NOT NULL,
	MEALS NUMBER(10) NOT NULL,
	PAYMENT_ID NUMBER NOT NULL,
    FOREIGN KEY (HOSTEL_ID) REFERENCES HOSTELS(HOSTEL_ID),
    FOREIGN KEY (ERP_ID) REFERENCES RESIDENTS(ERP_ID),
    FOREIGN KEY (PAYMENT_ID) REFERENCES PAYMENTS(PAYMENT_ID)
);

CREATE SEQUENCE mess_seq
    START WITH 2001
    INCREMENT BY 1;

CREATE OR REPLACE TRIGGER mess_trigger
    BEFORE INSERT ON MESS
    FOR EACH ROW
BEGIN
    IF :NEW.MESS_ID IS NULL THEN
        SELECT mess_seq.NEXTVAL INTO :NEW.MESS_ID FROM dual;
    END IF;
END;
/


CREATE TABLE LAUNDRY (
	LAUNDRY_ID NUMBER(10) GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
	HOSTEL_ID NUMBER(10) NOT NULL,
	ERP_ID NUMBER(10) NOT NULL,
	LAUNDRY_PERIOD VARCHAR2(25) NOT NULL,
	PAYMENT_ID NUMBER NOT NULL,
    FOREIGN KEY (HOSTEL_ID) REFERENCES HOSTELS(HOSTEL_ID),
    FOREIGN KEY (PAYMENT_ID) REFERENCES PAYMENTS(PAYMENT_ID)
);


CREATE TABLE VISITOR_LOGS (
    VISITOR_ID NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    VISITOR_NAME VARCHAR2(20) NOT NULL,
    HOSTEL_ID NUMBER NOT NULL,
    ERP_ID NUMBER NOT NULL,
    VISIT_DATE DATE DEFAULT SYSDATE,
    CHECKIN_TIME TIMESTAMP DEFAULT SYSTIMESTAMP,
    CHECKOUT_TIME TIMESTAMP NULL,
    FOREIGN KEY (HOSTEL_ID) REFERENCES HOSTELS(HOSTEL_ID),
    FOREIGN KEY (ERP_ID) REFERENCES RESIDENTS(ERP_ID)
);
